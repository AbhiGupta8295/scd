getWebviewContent() {
    return `
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>SCD Policy Generator</title>
            <style>
                /* Styling (same as you provided) */
                body { font-family: Arial, sans-serif; color: #ffffff; background-color: #191818; padding: 20px; }
                h1 { color: #e3f9ff; font-size: 24px; margin-bottom: 10px; }
                h2 { color: #f5d4ff; font-size: 18px; margin-top: 20px; }
                label { font-size: 14px; color: #c9c9c9; }
                input[type="file"], input[type="textarea"], textarea, button {
                    font-size: 14px; padding: 5px; margin: 5px 0; border-radius: 4px; border: 1px solid #3c3c3c; color: #ffffff; background-color: #ef0e0e;
                }
                textarea { width: 95%; resize: none; background-color: #2d2d2d; }
                input[type="checkbox"] { margin: 8px; }
                button { padding: 10px 15px; cursor: pointer; border: none; border-radius: 5px; transition: background-color 0.25 ease; }
                #scdButton:hover { background-color: #4caf50; color: white; }
                #policyButton:hover { background-color: #0b7dda; color: white; }
                .section { margin-bottom: 15px; }
            </style>
        </head>
        <body>
            <h1>SCD Policy Generator</h1>
            <div class="section">
                <h2>Upload a File</h2>
                <input type="file" id="fileInput" />
            </div>
            <div class="section">
                <h2>Enter a Prompt</h2>
                <label for="textPrompt">Enter Text Prompt:</label>
                <textarea rows="5" id="textPrompt" placeholder="Type your prompt here..."></textarea>
            </div>
            <div class="section">
                <h2>Output File Format</h2>
                <label>Choose file format:</label><br/>
                <input type="checkbox" id="option1" onclick="selectOnlyThis('option1')" /> .csv <br/>
                <input type="checkbox" id="option2" onclick="selectOnlyThis('option2')" /> .md <br/>
                <input type="checkbox" id="option3" onclick="selectOnlyThis('option3')" /> .xlsx <br/>
            </div>
            <div class="section">
                <h2>Generate Files</h2>
                <button id="scdButton">Generate SCD</button>
                <button id="policyButton">Generate IAM Policy</button>
            </div>
            <div id="output"></div>
            <script>
                const vscode = acquireVsCodeApi();

                function selectOnlyThis(id) {
                    document.getElementById("option1").checked = false;
                    document.getElementById("option2").checked = false;
                    document.getElementById("option3").checked = false;
                    document.getElementById(id).checked = true;
                }

                function getSelectedOptions() {
                    return [
                        document.getElementById('option1').checked,
                        document.getElementById('option2').checked,
                        document.getElementById('option3').checked
                    ];
                }

                // Handle SCD Button Click
                document.getElementById('scdButton').addEventListener('click', async () => {
                    const prompt = document.getElementById('textPrompt').value;
                    const options = getSelectedOptions();

                    try {
                        const response = await fetch('http://127.0.0.1:8000/generate-scd', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                user_prompt: prompt,
                                service: 'example_service',
                                additional_controls: options
                            })
                        });
                        const result = await response.json();
                        document.getElementById('output').textContent = 'Generated SCD: ' + result.scd;
                    } catch (error) {
                        document.getElementById('output').textContent = 'Error: ' + error.message;
                    }
                });

                // Handle Policy Button Click
                document.getElementById('policyButton').addEventListener('click', () => {
                    const prompt = document.getElementById('textPrompt').value;
                    const options = getSelectedOptions();

                    vscode.postMessage({ command: 'sendPolicyRequest', prompt, options });
                });
            </script>
        </body>
        </html>`;
}
