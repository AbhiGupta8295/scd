import os
import json
import re
import random

class PolicyGenerator:
    def __init__(self, vector_store=None, scd_templates=None):
        self.vector_store = vector_store
        self.scd_templates = scd_templates or []

    def load_scd_template(self):
        current_dir = os.path.dirname(os.path.abspath(__file__))
        try:
            template_path = os.path.join(current_dir, "templates", "aks-scd.json")
            with open(template_path, "r") as f:
                return json.load(f).get("policy_examples", [])
        except Exception as e:
            print(f"Error loading template: {e}")
            return []

    def generate_policy(self, user_prompt):
        if self.vector_store is None:
            raise ValueError("Vector store is not initialized. Please check vector store loading in ModelTrainer.")
        
        # Identify the resource name from the user prompt
        resource_name_match = re.search(r"\b(Azure\s\w+|GCP\s\w+)\b", user_prompt, re.IGNORECASE)
        resource_name = resource_name_match.group(0) if resource_name_match else "GeneralService"

        # Search for relevant security controls based on the prompt
        relevant_controls = self.vector_store.similarity_search(user_prompt, k=25)
        vector_store_controls = []

        # Extract control IDs and descriptions from the vector store results
        for doc in relevant_controls:
            control_id = doc.metadata.get("control_id") if hasattr(doc, "metadata") else None
            vector_store_controls.append({"control_id": control_id, "description": doc.page_content})

        # Generate additional control IDs if fewer than 20 results are found
        while len(vector_store_controls) < 20:
            new_id = self.generate_control_id(resource_name)
            vector_store_controls.append({"control_id": new_id, "description": ""})

        # Select a template and format it for the policy generation
        template_str = self.format_template(random.choice(self.scd_templates), resource_name)

        # Prepare control information for the prompt
        control_descriptions = [doc.page_content for doc in relevant_controls]
        control_ids_info = "\n".join([f"{ctrl['control_id']}" for ctrl in vector_store_controls])

        # Set up the prompt with control data for the model
        prompt_template = f"""
            SYSTEM PROMPT:
            You are a best practices security engineer tasked with implementing a security document. Your job is to generate a detailed IAM policy for {resource_name} that incorporates relevant security controls.

            USER PROMPT TEMPLATE:
            Generate a detailed IAM policy for {resource_name} incorporating security controls including:
            Identity and Access Management, Network Security, Data Protection, API Security, Logging, and Monitoring.
            Please ensure all aspects of security controls are applied in the policy.

            Control IDs:
            {control_ids_info}

            Control Descriptions:
            {"\n".join(control_descriptions)}
        """

        # Simulate invoking a model to generate the response
        response = self.invoke_model(prompt_template)
        
        return response

    def format_template(self, template, resource_name):
        # Replace any placeholders in the template with the resource name
        return template.replace("{resource_name}", resource_name)

    def generate_control_id(self, resource_name):
        # Placeholder for ID generation logic; this could be based on specific business logic
        return f"{resource_name}-CTRL-{random.randint(1000, 9999)}"

    def invoke_model(self, prompt_template):
        # This would normally invoke a language model to process the prompt
        print("Simulating model invocation with prompt:")
        print(prompt_template)
        return {"policy": "Generated IAM policy JSON based on provided controls and template."}



----------------2nd gen---------------
import os
import json
import re
import random

class PolicyGenerator:
    def __init__(self, scd_templates=None):
        self.scd_templates = scd_templates or []
        self.scd_controls = self.load_scd_template()

    def load_scd_template(self):
        current_dir = os.path.dirname(os.path.abspath(__file__))
        try:
            template_path = os.path.join(current_dir, "templates", "aks-scd.json")
            with open(template_path, "r") as f:
                return json.load(f).get("policy_examples", [])
        except Exception as e:
            print(f"Error loading template: {e}")
            return []

    def generate_policy(self, user_prompt):
        # Identify the resource name from the user prompt
        resource_name_match = re.search(r"\b(Azure\s\w+|GCP\s\w+)\b", user_prompt, re.IGNORECASE)
        resource_name = resource_name_match.group(0) if resource_name_match else "GeneralService"

        # Extract a subset of controls from the loaded SCD template (assuming we take the first 20 if available)
        selected_controls = self.scd_controls[:20] if len(self.scd_controls) >= 20 else self.scd_controls

        # Ensure we have at least 20 controls by generating additional placeholder controls if needed
        while len(selected_controls) < 20:
            new_id = self.generate_control_id(resource_name)
            selected_controls.append({"control_id": new_id, "description": ""})

        # Select a template and format it for policy generation
        template_str = self.format_template(random.choice(self.scd_templates), resource_name)

        # Prepare control information for the prompt
        control_ids_info = "\n".join([f"{ctrl['control_id']}" for ctrl in selected_controls])
        control_descriptions = "\n".join([ctrl['description'] for ctrl in selected_controls])

        # Define the full prompt template for policy generation
        prompt_template = f"""
            SYSTEM PROMPT:
            You are a best practices security engineer tasked with implementing a security document. Your job is to generate a detailed IAM policy for {resource_name} that incorporates relevant security controls.

            USER PROMPT TEMPLATE:
            Generate a detailed IAM policy for {resource_name} incorporating security controls including:
            Identity and Access Management, Network Security, Data Protection, API Security, Logging, and Monitoring.
            Please ensure all aspects of security controls are applied in the policy.

            Control IDs:
            {control_ids_info}

            Control Descriptions:
            {control_descriptions}
        """

        # Simulate invoking a model to generate the response
        response = self.invoke_model(prompt_template)
        
        return response

    def format_template(self, template, resource_name):
        # Replace any placeholders in the template with the resource name
        return template.replace("{resource_name}", resource_name)

    def generate_control_id(self, resource_name):
        # Placeholder for ID generation logic; this could be based on specific business logic
        return f"{resource_name}-CTRL-{random.randint(1000, 9999)}"

    def invoke_model(self, prompt_template):
        # This would normally invoke a language model to process the prompt
        print("Simulating model invocation with prompt:")
        print(prompt_template)
        return {"policy": "Generated IAM policy JSON based on provided controls and template."}


----------------------------------------------------------------------------

{
  "Name": "AKSReadOnlyAccess",
  "IsCustom": true,
  "Description": "Provides read-only access to all aspects of Azure Kubernetes Service (AKS) for monitoring and auditing purposes.",
  "Actions": [
    // Read access to AKS clusters and configurations
    "Microsoft.ContainerService/managedClusters/read",
    "Microsoft.ContainerService/managedClusters/listClusterAdminCredential/action",
    "Microsoft.ContainerService/managedClusters/listClusterUserCredential/action",
    
    // Read access to networking resources used by AKS
    "Microsoft.Network/virtualNetworks/read",
    "Microsoft.Network/networkInterfaces/read",
    "Microsoft.Network/publicIPAddresses/read",
    "Microsoft.Network/networkSecurityGroups/read",
    "Microsoft.Network/loadBalancers/read",
    "Microsoft.Network/applicationGateways/read",

    // Read access to AKS node pools
    "Microsoft.ContainerService/managedClusters/agentPools/read",

    // Read access to Azure Monitor and Log Analytics
    "Microsoft.Insights/metrics/read",
    "Microsoft.Insights/metricDefinitions/read",
    "Microsoft.Insights/logProfiles/read",
    "Microsoft.Insights/diagnosticSettings/read",
    "Microsoft.Insights/actionGroups/read",

    // Read access to resource groups and related resources
    "Microsoft.Resources/subscriptions/resourceGroups/read",
    "Microsoft.Resources/deployments/read",
    "Microsoft.Resources/subscriptions/read",
    "Microsoft.Resources/subscriptions/providers/read",
    
    // Read access for Kubernetes RBAC configurations
    "Microsoft.Authorization/roleAssignments/read",
    "Microsoft.Authorization/roleDefinitions/read",

    // Access for monitoring and security insights
    "Microsoft.Security/pricings/read",
    "Microsoft.Security/locations/securityContacts/read",
    "Microsoft.Security/securityContacts/read",
    "Microsoft.Security/securitySolutions/read",
    
    // Access to container logs and monitoring
    "Microsoft.OperationalInsights/workspaces/read",
    "Microsoft.OperationalInsights/workspaces/sharedKeys/read",
    "Microsoft.OperationalInsights/workspaces/query/read",
    
    // Read access for managed identities and container registry
    "Microsoft.ManagedIdentity/userAssignedIdentities/read",
    "Microsoft.ContainerRegistry/registries/read",
    
    // Read access to storage accounts associated with AKS
    "Microsoft.Storage/storageAccounts/read",
    "Microsoft.Storage/storageAccounts/listKeys/action"
  ],
  "NotActions": [
    // Prevent any write, delete, or modify actions
    "Microsoft.ContainerService/managedClusters/write",
    "Microsoft.ContainerService/managedClusters/delete",
    "Microsoft.ContainerService/managedClusters/agentPools/write",
    "Microsoft.ContainerService/managedClusters/agentPools/delete",
    "Microsoft.Resources/deployments/write",
    "Microsoft.Storage/storageAccounts/write",
    "Microsoft.ManagedIdentity/userAssignedIdentities/write",
    "Microsoft.Authorization/roleAssignments/write"
  ],
  "AssignableScopes": [
    // Scope where this policy can be assigned (e.g., at subscription or resource group level)
    "/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}",
    "/subscriptions/{subscription-id}"
  ]
}


--------------------------------------------------------------------
permissions to access
[
  {
    "RoleName": "Reader",
    "Description": "Provides read-only access to view all Azure resources.",
    "Permissions": {
      "Actions": [
        "*/read"
      ],
      "NotActions": [
        "*/write",
        "*/delete",
        "*/modify"
      ],
      "AssignableScopes": [
        "/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}",
        "/subscriptions/{subscription-id}"
      ]
    }
  },
  {
    "RoleName": "Contributor",
    "Description": "Provides full read, write, and modify access, but does not grant permissions to manage access or assign roles.",
    "Permissions": {
      "Actions": [
        "*/read",
        "*/write",
        "*/delete",
        "*/modify"
      ],
      "NotActions": [
        "Microsoft.Authorization/*/write",
        "Microsoft.Authorization/roleAssignments/*",
        "Microsoft.Authorization/roleDefinitions/*"
      ],
      "AssignableScopes": [
        "/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}",
        "/subscriptions/{subscription-id}"
      ]
    }
  },
  {
    "RoleName": "Administrator",
    "Description": "Provides full access to all Azure resources, including permissions to manage access and assign roles.",
    "Permissions": {
      "Actions": [
        "*"
      ],
      "NotActions": [],
      "AssignableScopes": [
        "/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}",
        "/subscriptions/{subscription-id}"
      ]
    }
  }
]

----------------------------–---------------------------------------
iam json policy for aks READERS ROLE

{
    "RoleName": "AKS Reader",
    "Description": "Provides read-only access to Azure Kubernetes Service (AKS) resources.",
    "Permissions": {
        "Actions": [
            "Microsoft.ContainerService/managedClusters/read",
            "Microsoft.ContainerService/managedClusters/listClusterUserCredentials/action",
            "Microsoft.ContainerService/managedClusters/listClusterAdminCredentials/action",
            "Microsoft.ContainerService/operations/read",
            "Microsoft.Insights/metrics/read",
            "Microsoft.Insights/logs/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Network/virtualNetworks/subnets/read",
            "Microsoft.Authorization/roleAssignments/read"
        ],
        "NotActions": [
            "Microsoft.ContainerService/managedClusters/write",
            "Microsoft.ContainerService/managedClusters/delete",
            "Microsoft.ContainerService/managedClusters/runCommand/action"
        ],
        "AssignableScopes": [
            "/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/Microsoft.ContainerService/managedClusters/{aks-cluster-name}"
        ]
    }
}


------------------------------------

AKS CONTRIBUTOR ROLE

{
  "RoleName": "AKS Contributor",
  "Description": "Provides read, write, delete, and modify permissions for managing Azure Kubernetes Service (AKS) resources. This role does not grant permissions to manage access or assign roles.",
  "Permissions": {
    "Actions": [
      "Microsoft.ContainerService/managedClusters/read",
      "Microsoft.ContainerService/managedClusters/write",
      "Microsoft.ContainerService/managedClusters/delete",
      "Microsoft.ContainerService/managedClusters/upgrade",
      "Microsoft.ContainerService/managedClusters/scale",
      "Microsoft.ContainerService/managedClusters/agentPools/read",
      "Microsoft.ContainerService/managedClusters/agentPools/write",
      "Microsoft.ContainerService/managedClusters/agentPools/delete",
      "Microsoft.ContainerService/operations/read",
      "Microsoft.Authorization/policyAssignments/read",
      "Microsoft.Insights/metrics/read",
      "Microsoft.Insights/logs/read",
      "Microsoft.Network/virtualNetworks/subnets/join/action",
      "Microsoft.Network/virtualNetworks/subnets/read",
      "Microsoft.Compute/virtualMachines/read",
      "Microsoft.Compute/virtualMachines/start/action",
      "Microsoft.Compute/virtualMachines/restart/action",
      "Microsoft.Network/networkInterfaces/read",
      "Microsoft.Network/publicIPAddresses/read"
    ],
    "NotActions": [
      "Microsoft.Authorization/*/write",
      "Microsoft.Authorization/roleAssignments/*",
      "Microsoft.Authorization/roleDefinitions/*",
      "Microsoft.ManagedIdentity/*"
    ],
    "AssignableScopes": [
      "/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}",
      "/subscriptions/{subscription-id}"
    ]
  }
}


----------------&&&&&&&&&&&&&&&--------------&&&&-----

AZURE ADMINISTRATOR ROLE

{
  "RoleName": "AKSAdministrator",
  "Description": "Provides full administrative access to Azure Kubernetes Service resources, including cluster and network management, scaling, monitoring, and role assignment.",
  "Permissions": {
    "Actions": [
      "Microsoft.ContainerService/managedClusters/read",
      "Microsoft.ContainerService/managedClusters/write",
      "Microsoft.ContainerService/managedClusters/delete",
      "Microsoft.ContainerService/managedClusters/upgrade",
      "Microsoft.ContainerService/managedClusters/scale",
      "Microsoft.ContainerService/managedClusters/stop",
      "Microsoft.ContainerService/managedClusters/start",
      "Microsoft.ContainerService/agentPools/read",
      "Microsoft.ContainerService/agentPools/write",
      "Microsoft.ContainerService/agentPools/delete",
      "Microsoft.ContainerService/agentPools/scale",
      "Microsoft.ContainerService/managedClusters/agentPools/read",
      "Microsoft.ContainerService/managedClusters/agentPools/write",
      "Microsoft.Authorization/roleAssignments/write",
      "Microsoft.Authorization/roleAssignments/delete",
      "Microsoft.Insights/metrics/read",
      "Microsoft.Insights/metrics/write",
      "Microsoft.Network/networkSecurityGroups/read",
      "Microsoft.Network/networkSecurityGroups/write",
      "Microsoft.Network/virtualNetworks/subnets/join/action",
      "Microsoft.Network/publicIPAddresses/read",
      "Microsoft.Network/loadBalancers/read",
      "Microsoft.Network/loadBalancers/write"
    ],
    "NotActions": [],
    "AssignableScopes": [
      "/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/Microsoft.ContainerService/managedClusters/{aks-cluster-name}"
    ]
  }
}


-------------_----------&-&--------_-------------


Prompt:

You are an expert cloud security engineer specializing in Azure Identity and Access Management (IAM). Your task is to generate detailed IAM policies in JSON format based on the provided context, which may include:

Security control definitions (SCDs) relevant to Azure services.
High-level descriptions of required permissions (e.g., read-only, admin, custom roles).
Vector embeddings or summarized control metadata associated with Azure resources.
When generating the JSON policy, ensure the following:

Structure: Use the standard Azure IAM policy JSON structure, including RoleName, Description, Permissions, Actions, NotActions, and AssignableScopes.
Relevance: Map permissions accurately to the described requirements or control objectives. Include only the necessary Actions while adhering to the principle of least privilege.
Generalization: The policy should be applicable across various Azure services like Azure Kubernetes Service (AKS), Azure Storage, Azure Virtual Machines, etc., depending on the context.
Customization: Allow flexibility for scopes and actions based on the provided input, ensuring the policy meets operational and security needs.
Examples:

Security Control Definition: "Ensure all Azure Kubernetes Service (AKS) clusters are managed with least privilege. Developers should have read-only access to logs and configurations, while admins have full control over cluster management."
Expected Output: A JSON IAM policy for AKS clusters with separate roles for admins and developers.
Permission Requirement: "Create a custom role for Azure Storage that allows read and write access to blob storage but denies delete operations."
Expected Output: A JSON IAM policy granting Microsoft.Storage/blobs/read and Microsoft.Storage/blobs/write, but excluding delete actions.
Vector Metadata: "The control vectors indicate the need for full access to monitoring metrics and logs in Azure Monitor for compliance purposes."
Expected Output: A JSON IAM policy for Azure Monitor granting access to metric and log data.
Policy Requirements:

Generate the JSON policy to be human-readable and easily deployable in Azure environments.
Provide a clear and concise description in the Description field.
Validate all actions and scopes to ensure compliance with Azure resource-level permissions.
Example Completion for AKS Admin Role:
plaintext
Copy code
Input:
"Full administrative access to Azure Kubernetes Service (AKS) resources, including cluster scaling, monitoring, and agent pool management."

Output:
{
  "RoleName": "AKSAdministrator",
  "Description": "Full administrative access to Azure Kubernetes Service (AKS) resources.",
  "Permissions": {
    "Actions": [
      "Microsoft.ContainerService/managedClusters/read",
      "Microsoft.ContainerService/managedClusters/write",
      "Microsoft.ContainerService/agentPools/*",
      "Microsoft.Insights/metrics/read"
    ],
    "NotActions": [],
    "AssignableScopes": [
      "/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/Microsoft.ContainerService/managedClusters/{aks-cluster-name}"
    ]
  }
}
